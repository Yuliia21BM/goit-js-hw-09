{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAEtCF,EAAOG,iBAAiB,SAaxB,SAAqBC,GACG,UAAlBA,EAAEC,OAAOC,KACXC,EAAaC,OAAOJ,EAAEC,OAAOI,OACF,SAAlBL,EAAEC,OAAOC,KAClBI,EAAYF,OAAOJ,EAAEC,OAAOI,OACD,WAAlBL,EAAEC,OAAOC,OAClBK,EAASH,OAAOJ,EAAEC,OAAOI,O,IAlB7BT,EAAOG,iBAAiB,UAsBxB,SAAsBC,GACpBA,EAAEQ,iBAEF,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChCC,EAAQC,KAAKF,GAGfG,YAAW,KACTF,EAAQG,KAAI,KAoBhB,IAAuBC,EAAUC,GAAVD,EApBeE,IAoBLD,EApBwBE,IAAiBd,EAqBxD,IAAIe,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GACtCX,YAAW,KACLS,EACFF,EAAQ,uBAAqBL,QAAiBC,OAE5CK,EAAK1B,EAAA8B,OAAOC,QAAQ,sBAAoBX,QAAeC,OAAW,GAErEA,EAAM,KA7B0EW,MAAKC,GAAUjC,EAAA8B,OAAOI,QAAQD,KAASE,OAAMC,GAASpC,EAAA8B,OAAOC,QAAQK,IAAO,GAAG,GACjK3B,E,IA7BL,IAAIA,EAAa,EACbG,EAAY,EACZC,EAAS,EACb,MAAMS,EA6BN,WACE,IAAIe,EAAQ,EACZ,OAAO,WAEL,OADAA,GAAS,EACFA,C,EAjCYC,GACjBf,EAoCN,WACE,IAAIc,EAAQ5B,EAAaG,EACzB,OAAO,WAEL,OADAyB,GAASzB,EACFyB,C,EAxCUE,GAEfvB,EAAU","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('input', onFormInput);\nformEl.addEventListener('submit', onFormSubmit)\n\nlet firstDelay = 0;\nlet dalayStep = 0;\nlet amount = 0;\nconst promiseCounter = counterOfPromises();\nconst dilayCounter = counterOfDilay();\n\nconst counter = [];\n\n\n\nfunction onFormInput(e) {\n  if (e.target.name === \"delay\") {\n    firstDelay = Number(e.target.value);\n  } else if (e.target.name === \"step\") {\n    dalayStep = Number(e.target.value);\n  } else if (e.target.name === \"amount\") {\n    amount = Number(e.target.value);\n  }\n}\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  for (let i = 1; i <= amount; i += 1) {\n    counter.push(i);\n  }\n  \n  setTimeout(() => {\n    counter.map(() => { createPromise(promiseCounter(), (dilayCounter() + firstDelay)).then(result => Notify.success(result)).catch(error => Notify.failure(error)) });\n  }, firstDelay);\n}\n\nfunction counterOfPromises() {\n  let count = 0;\n  return function () {\n    count += 1;\n    return count;\n  }\n}\n\nfunction counterOfDilay() {\n  let count = firstDelay + dalayStep;\n  return function () {\n    count += dalayStep;\n    return count;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n      }\n    }, delay);\n  }\n  )\n  return promise;\n}\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","addEventListener","e","target","name","$47d4ff9957288465$var$firstDelay","Number","value","$47d4ff9957288465$var$dalayStep","$47d4ff9957288465$var$amount","preventDefault","i","$47d4ff9957288465$var$counter","push","setTimeout","map","position","delay","$47d4ff9957288465$var$promiseCounter","$47d4ff9957288465$var$dilayCounter","Promise","resolve","reject","shouldResolve","Math","random","Notify","failure","then","result","success","catch","error","count","$47d4ff9957288465$var$counterOfPromises","$47d4ff9957288465$var$counterOfDilay"],"version":3,"file":"03-promises.29f97b3a.js.map"}